#!/bin/sh
# -*- mode: shell-script; coding: utf-8-emacs-unix; sh-basic-offset: 8; indent-tabs-mode: t -*-
# This code is under Simplified BSD License, see LICENSE for more info
# Copyright (c) 2010, Piotr Karbowski
# All rights reserved.

#set -e # exit on >0.
#set -x # debug

# Load functions.
. /functions.sh

# Prepare dirs
run dodir /dev /newroot /sbin /proc /sys /etc /usr/bin /var/log /var/run
[ -d /lib ] && run ln -s /lib /lib64
[ -d /usr/lib ] && run ln -s /usr/lib /usr/lib64

# Basic /dev content, we need it as fast as possible.
[ ! -e /dev/console ]	&& run mknod /dev/console c 5 1
[ ! -e /dev/null ]	&& run mknod /dev/null c 1 3
[ ! -e /dev/tty ]	&& run mknod /dev/tty c 5 0
[ ! -e /dev/urandom ]	&& run mknod /dev/urandom c 1 9
[ ! -e /dev/random ]	&& run mknod /dev/random c 1 8
[ ! -e /dev/zero ]	&& run mknod /dev/zero c 1 5

# Clear the screen
clear

# Config.
if [ -f /config ]; then . /config; fi

# Basic
kernelver="$(uname -r)"
ver="$(cat /VERSION)"

einfo "better-initramfs v${ver}"
einfo "kernel ${kernelver}\n"

einfo "Mounting /proc"
run mount -t proc proc /proc

# Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

einfo "Mounting /sys"
run mount -t sysfs sysfs /sys

# Process command line options
for i in $(cat /proc/cmdline); do
	case "${i}" in
		root\=*)
			root=$(get_opt $i)
		;;
		init\=*)
			init=$(get_opt $i)
		;;
		enc_root\=*)
			enc_root=$(get_opt $i)
		;;
	        enc_root_keydev\=*)
       			enc_root_keydev=$(get_opt $i)
        	;;
        	enc_root_keyfile\=*)
            		enc_root_keyfile=$(get_opt $i)
        	;;
		luks)
			luks=true
		;;
		lvm)
			lvm=true
		;;
		dodropbear)
			dodropbear=true
		;;
		dodropbear\=*)
			dodropbear=true
			dropbearip=$(get_opt $i)
		;;
		aufs)
			aufs=true
		;;
		softraid)
			softraid=true
 		;;
		rescueshell)
			rescueshell=true
		;;
		tuxonice)
			tuxonice=true
		;;
		resume\=*)
			resume=$(get_opt $i)
		;;
		rootfstype\=*)
			rootfstype=$(get_opt $i)
		;;
		rootdelay\=*)
			rootdelay=$(get_opt $i)
		;;
	esac
done


if [ -z $init ]; then init="/sbin/init"; fi
if [ -z $root ]; then eerror "\$root variable is empty. This is fatal."; fi

einfo "Create all the symlinks to /bin/busybox."
run busybox --install -s

if [ -n "$rootdelay" ]; then
	if [ $rootdelay -gt 0 2>/dev/null ]; then
		einfo "Waiting $(get_opt $rootdelay)s (rootdelay)"
		run sleep $(get_opt $rootdelay)
	else
		ewarn "\$rootdelay variable must be numeric and greater than zero. Skipping rootdelay."
	fi
fi

run bootstrap_dynamic_libs

# prepare /dev
mountdev
# mdadm hook.
use softraid && initmdadm
# lvm hook.
use lvm && initlvm
# dmcrypt luks + lvm, if enabled.
use luks && initluks && use lvm && initlvm
# Drop to rescue shell.
use rescueshell && droptoshell
# Resume from TuxOnIce hibernation.
use tuxonice && dotuxonice

# Mount rootfs to /newroot.
mountroot

einfo "Unmounting /sys and /proc."
run umount /sys /proc
if [ "$mdev_fallback" != "true" ]; then
	einfo "Unmounting /dev."
	run umount /dev
fi

#Switch to the new root and execute init
if [[ -x "/newroot/${init}" ]] ; then
	einfo "Switching root to /newroot and executing /sbin/init."
	exec switch_root /newroot "${init}"
fi

ewarn "Something goes wrong."
droptoshell
