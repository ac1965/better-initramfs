#!/bin/sh
# This code is under Simplified BSD License, see LICENSE for more info
# Copyright (c) 2010, Piotr Karbowski
# All rights reserved.

#set -e # exit on >0.
#set -x # debug

# Load functions.
. /functions.sh

# Clear the screen
clear

# Default values.
luks=false
lvm=false
rescueshell=false
nic="eth0"
ipaddr="192.168.0.123"
tuxonice=false
mdev_fallback=false
enc_root_keydev=""
enc_root_keyfile=""
cryptsetup_options=""
mntkey='/mnt/key'

## Config.
if [ -f /config ]; then
        . /config
fi

# Basic
kernelver="$(uname -r)"
ver="$(cat /VERSION)"

einfo "better-initramfs v${ver}"
einfo "kernel ${kernelver}\n"

# Prepare dirs.
run dodir /dev /newroot /sbin /proc /sys /etc

einfo "Mounting /proc"
run mount -t proc proc /proc

# Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

einfo "Mounting /sys"
run mount -t sysfs sysfs /sys

einfo "Initiating /dev (devtmpfs)."
if ! mount -t devtmpfs devtmpfs /dev; then
	ewarn "Unable to mount devtmpfs, missing CONFIG_DEVTMPFS?"
	ewarn "Fallback to busybox's mdev."
	mdev_fallback="true"
fi

# Process command line options
for i in $(cat /proc/cmdline); do
	case "${i}" in
		root\=*)
			root=$(get_opt $i)
		;;
		init\=*)
			init=$(get_opt $i)
		;;
		enc_root\=*)
			enc_root=$(get_opt $i)
		;;
        enc_root_keydev\=*)
            enc_root_keydev=$(get_opt $i)
        ;;
        enc_root_keyfile\=*)
            enc_root_keyfile=$(get_opt $i)
        ;;
		luks)
			luks=true
		;;
		lvm)
			lvm=true
		;;
		rescueshell)
			rescueshell=true
		;;
        nic\=*)
            nic=$(get_opt $i)
        ;;
        ipaddr\=*)
            ipaddr=$(get_opt $i)
        ;;
		tuxonice)
			tuxonice=true
		;;
		resume\=*)
			resume=$(get_opt $i)
		;;
		rootfstype\=*)
			rootfstype=$(get_opt $i)
		;;
		rootdelay\=*)
			rootdelay=$(get_opt $i)
		;;
	esac
done
####

einfo "Create all the symlinks to /bin/busybox."
run busybox --install -s

if [ ! -z $rootdelay ]; then
	ewarn "Waiting $(get_opt $rootdelay) sec before init /dev."
    case $roodtdelay in
        *[![:digit:].]*)
            ewarn "rootdelay must numeric/rootdelay(=$rootdelay) collect 5sec."
            rootdelay=5
    ;;
    esac
	run sleep $(get_opt $rootdelay)
fi

if [ $mdev_fallback = "true" ]; then
	einfo "Initiating /dev (mdev)."
	touch /etc/mdev.conf # Do we really need this empty file?
	run mknod /dev/null c 1 3
	run mknod /dev/tty c 5 0
	run echo /sbin/mdev > /proc/sys/kernel/hotplug
	run mdev -s
fi

if [ -z $init ]; then
	init="/sbin/init"
fi

if [ -z $root ]; then
	eerror "\$root variable is empty. This is fatal."
fi

if [ $lvm = "true" ]; then
	einfo "Getting LVM volumes up (if any)."
	run lvm vgscan && run lvm vgchange -a y
fi

if [ $luks = "true" ]; then
	if [ -z $enc_root ]; then
		eerror "You have enabled luks but your \$enc_root variable is empty."
		droptoshell
	fi
	
    # cryptsetup exist?
    if [ ! -e /bin/cryptsetup ]; then
        eerror "The ramdisk does not support LUKS."
        dropshell
    fi

	einfo "Opening encrypted partition and mapping to /dev/mapper/enc_root."
	# Resolve possible UUID or LABEL of enc_root now, after getting lvm up.
	enc_root="$(get_device $enc_root)"
	if [ -z $enc_root ]; then
        	eerror "\$enc_root variable is empty. Wrong UUID/LABEL?"
	        droptoshell
	fi

	# Hack for cryptsetup which trying to run /sbin/udevadm.
	run echo -e "#!/bin/sh\nexit 0" > /sbin/udevadm
	run chmod 755 /sbin/udevadm

    # LUKS device check
    if cryptsetup isLuks $enc_root > /dev/null 2>&1; then
        enc_root_keydev="$(get_device $enc_root_kedydev)"
        if [ x"${enc_root_keyfile}" != x"" ] && [ x"${enc_root_keydev}" != x"" ]; then
            if [ -b $enc_root_keydev ]; then
                einfo "Using key device=$enc_root_keydev and keyfile=${enc_root_keyfile}."
            else
                einfo "Please insert removable device ${enc_root_kedev}."
                count=10 # wait 10sec
                while [ ${count} -gt 0 ]; do
                    count=$((count-1))
                    sleep 1
                    if [ -b $enc_root_keydev ]; then
                        einfo "device (${enc_root_keydev}) detected."
                        break
                    fi
                done
                test $count -eq 0 && ewarn "device (${enc_root_keydev}) not found, skipping"
                [ -d $mntkey ] || mkdir -p $mntkey
                if mount -n -t auto -o ro $enc_root_keydev $mntkey >/dev/null 2>&1; then
                    if [ -e "${mntkey}${enc_root_keyfile}" ]; then
                        cryptsetup_options="-d ${mntkey}${enc_root_keyfile}"
                    else
                        ewarn "keyfile (${enc_root_keyfile}) not found, umount ${mntkey}"
                        umount -n $mntkey
                    fi
                fi
        else
            ewarn "enc_root_keyfile= variable is empty, skipping"
        fi
    fi

	run cryptsetup $cryptsetup_options luksOpen $enc_root enc_root

    if [ x"${cryptsetup_options}" != x"" ]; then
        einfo "Unmounting $mntkey"
        umount -n $mntkey
    fi

	if [ $lvm = "true" ]; then
		einfo "Again, getting LVM volumes up (if any, after map dmcrypt)."
		run lvm vgscan && run lvm vgchange -a y
	fi
else
    error "device (${enc_root}) is not LUKS."
    droptoshell
fi

if [ $rescueshell = "true" ]; then
    if [ -n $ipaddr ]; then
        einfo "try getting IPaddress (${ipaddr})."
        ifconfig $nic $ipaddr up
        if [ "$?" -eq 0 ]; then
            if [ -x /bin/dropbear ]; then
                # sanitalyze
                for f in /etc/passwd /etc/shadow /etc/group /etc/nsswitch.conf /etc/localtime /bin/dropbear; do
                    test -f $f && chown root:root $f
                done
                chmod 600 /etc/shadow
                run hostname mybox

                # make banner
                [ ! -e /etc/dropbear/ ] && mkdir -p /etc/dropbear
                echo "" > /etc/dropbear/banner
                echo "better-iinitramfs v${ver}" >> /etc/dropbear/banner
                echo "kernel ${kernelver}" >> /etc/dropbear/banner
                echo "" >> /etc/dropbear/banner

                # make hostkey
                [ ! -e /etc/dropbear/dropbear_dss_host_key ] && (
                    einfo "Generating DSS-Hostkey..."
                    dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
                 )
                [ ! -e /etc/dropbear/dropbear_rsa_host_key ] && (
                    einfo "Generating RSA-Hostkey..."
                    dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
                )

                [ -d /var/run ] || mkdir -p /var/run
                einfo "Starting dropbear"
                dropbear -b /etc/dropbear/banner -F 2>&1 | tee /var/run/dropbear.log > /dev/tty10 &
            fi
        else
            error "could not get IPaddr ${ipaddr}"
        fi
    fi
	droptoshell
    [ -e /var/run/dropbear.pid ] && kill "$(cat /var/run/dropbear.pid)"
fi

if [ $tuxonice = "true" ]; then
	if [ ! -z $resume ]; then
		if [ ! -f /sys/power/tuxonice/do_resume ]; then
			ewarn "Your kernel do not support TuxOnIce.";
		else
			einfo "Sending do_resume signal to TuxOnIce."
			run echo 1 > /sys/power/tuxonice/do_resume
		fi
	else
		ewarn "resume= variable is empty, not cool, skipping tuxonice."
	fi
fi

#Mount the root device
mountparams="-o ro"

if [ ! -z $rootfstype ]; then
	mountparams="$mountparams -t $rootfstype"
fi

einfo "Mounting rootfs to /newroot."
# Resolve $root now, after getting up lvm and dmcrypt (and lvm ;p).
root=$(get_device $root)
if [ -z $root ]; then
	eerror "\$root variable is empty. Wrong UUID/LABEL?"
	droptoshell
fi

run mount $mountparams "${root}" /newroot

#Unmount all other mounts so that the ram used by
#the initramfs can be cleared after switch_root
einfo "Umounting /sys and /proc."
run umount /sys /proc

if [ $mdev_fallback = "false" ]; then
	einfo "Unmounting /dev."
	run umount /dev
fi


#Switch to the new root and execute init
if [[ -x "/newroot/${init}" ]] ; then
	einfo "Switching root to /newroot and executing /sbin/init."
	exec switch_root /newroot "${init}"
fi

ewarn "Something goes wrong."
droptoshell
